local function duplicatePet(petName)
	local ok, Loads = pcall(function()
		return require(game.ReplicatedStorage:WaitForChild("Fsys")).load
	end)
	if not ok then return end

	local ClientData = Loads("ClientData")
	local InventoryDB = Loads("InventoryDB")
	local PetEquip = Loads("PetEquip")
	local ClientState = Loads("ClientState")
	local Inventory = ClientData.get("inventory")

	if not Inventory or not InventoryDB then return end

	for _, pets in pairs(InventoryDB) do
		for id, item in pairs(pets) do
			if item.name and item.name:lower() == petName:lower() then
				local newItem = clone(item)
				local uuid = "uuid_" .. game.HttpService:GenerateGUID(false)
				newItem.unique = uuid
				newItem.category = "pets"
				newItem.properties = generate_props()
				newItem.newness_order = math.random(1, 900000)
				Inventory.pets = Inventory.pets or {}
				Inventory.pets[uuid] = newItem
				ClientState.set("equipped_pet", uuid)

				if PetEquip and PetEquip.equip then
					pcall(function()
						PetEquip.equip(newItem)
					end)
				end

				-- âœ… NEW: Spawn the visible pet model beside the player
				local petFolder = game.ReplicatedStorage:FindFirstChild("Pets")
				if petFolder then
					local petModel = petFolder:FindFirstChild(item.name)
					if petModel and petModel:IsA("Model") then
						local clonedPet = petModel:Clone()
						clonedPet.Name = petName .. "_Clone"
						clonedPet.Parent = workspace

						local rootPart = clonedPet:FindFirstChild("HumanoidRootPart") or clonedPet:FindFirstChildWhichIsA("BasePart")
						if rootPart then
							local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
							local hrp = char:FindFirstChild("HumanoidRootPart")
							if hrp then
								rootPart.CFrame = hrp.CFrame * CFrame.new(3, 0, 3)
							end
						end
					else
						warn("Model for pet '" .. item.name .. "' not found in ReplicatedStorage.Pets.")
					end
				else
					warn("No 'Pets' folder in ReplicatedStorage.")
				end

				return
			end
		end
	end
end
