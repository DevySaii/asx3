local Loads = require(game.ReplicatedStorage.Fsys).load
local ClientData = Loads("ClientData")
local InventoryDB = Loads("InventoryDB")
local RidePetAPI = Loads("AdoptAPI/RidePet")
local RideParentAPI = Loads("AdoptAPI/RideParent")
local FlyPetAPI = Loads("AdoptAPI/FlyPet")

local HttpService = game:GetService("HttpService")

local function clone(t)
	local c = {}
	for k, v in pairs(t) do
		c[k] = typeof(v) == "table" and clone(v) or v
	end
	return c
end

local function duplicatePet(name)
	local Inventory = ClientData.get("inventory")
	Inventory.pets = Inventory.pets or {}

	for _, pets in pairs(InventoryDB) do
		for id, item in pairs(pets) do
			if item.name:lower() == name:lower() then
				local newItem = clone(item)
				local uuid = "uuid_" .. HttpService:GenerateGUID(false)

				newItem.unique = uuid
				newItem.category = "pets"
				newItem.newness_order = math.random(1, 999999)
				newItem.properties = {
					age = 1,
					neon = petType:find("N") and not petType:find("NP") or false,
					mega_neon = petType:find("M") and not petType:find("NP") or false
				}

				-- Add pet to inventory
				Inventory.pets[uuid] = newItem

				-- Apply API-based powers
				if petType:find("R") then
					RidePetAPI:Add(uuid)
					RideParentAPI:Add(uuid)
				end

				if petType:find("F") then
					FlyPetAPI:Add(uuid)
				end

				print("Spawned pet:", name, "with UUID:", uuid)
				return
			end
		end
	end

	warn("Pet not found in database:", name)
end
